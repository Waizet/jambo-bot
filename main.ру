import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import languages

API_TOKEN = '7996715950:AAGGMdqSfG08ulx0zQ_eSHJ3NTB3uzcegAA'

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# FSM –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏ —Ä–æ–ª–∏
class Form(StatesGroup):
    choosing_language = State()
    choosing_role = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for lang in languages.languages:
        kb.add(KeyboardButton(lang))
    await message.answer("üåç Please choose your language / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=kb)
    await Form.choosing_language.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.message_handler(state=Form.choosing_language)
async def choose_language(message: types.Message, state: FSMContext):
    lang = message.text
    if lang not in languages.languages:
        await message.answer("‚ùå Invalid language. Please choose from the list.")
        return
    await state.update_data(language=lang)
    user_data[message.from_user.id] = {"language": lang}
    await ask_role(message, lang)
    await Form.choosing_role.set()

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–æ–ª–∏
async def ask_role(message, lang):
    text = languages.texts[lang]['choose_role']
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton(languages.texts[lang]['driver']))
    kb.add(KeyboardButton(languages.texts[lang]['passenger']))
    kb.add(KeyboardButton(languages.texts[lang]['taxi']))
    await message.answer(text, reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
@dp.message_handler(state=Form.choosing_role)
async def choose_role(message: types.Message, state: FSMContext):
    user = user_data.get(message.from_user.id, {})
    lang = user.get("language", "English")
    role_text = message.text

    texts = languages.texts[lang]
    if role_text == texts['driver']:
        await message.answer(texts['driver_confirm'])
    elif role_text == texts['passenger']:
        await message.answer(texts['passenger_confirm'])
    elif role_text == texts['taxi']:
        await message.answer(texts['taxi_confirm'])
    else:
        await message.answer(texts['invalid_option'])
        return

    await state.finish()

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
