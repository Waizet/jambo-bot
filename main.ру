# main.py
import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from languages import LANGUAGES

# üîê –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
API_TOKEN = os.getenv("BOT_TOKEN")

# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# üåê –°–ª–æ–≤–∞—Ä—å –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ {user_id: lang_code}
user_languages = {}

# üîò –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def get_language_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    row = []
    count = 0
    for code, lang in LANGUAGES.items():
        row.append(KeyboardButton(lang["name"]))
        count += 1
        if count % 2 == 0:
            kb.add(*row)
            row = []
    if row:
        kb.add(*row)
    return kb

# üîÅ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
def t(user_id, key):
    lang_code = user_languages.get(user_id, 'en')
    return LANGUAGES.get(lang_code, LANGUAGES['en'])['messages'].get(key, key)

# üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    await message.answer("üåç Please select your language / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=get_language_keyboard())

# üåç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(lambda message: message.text in [lang["name"] for lang in LANGUAGES.values()])
async def set_language_handler(message: types.Message):
    user_id = message.from_user.id
    for code, lang in LANGUAGES.items():
        if message.text == lang["name"]:
            user_languages[user_id] = code
            await message.answer(lang["messages"]["language_selected"])
            await show_main_menu(message, code)
            return

# üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(message, lang_code):
    tr = LANGUAGES[lang_code]["messages"]
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(
        KeyboardButton(tr["companion"]),
        KeyboardButton(tr["passenger"]),
    )
    kb.add(
        KeyboardButton(tr["taxi"]),
        KeyboardButton(tr["delivery"]),
    )
    kb.add(KeyboardButton(tr["help"]))
    await message.answer(tr["main_menu"], reply_markup=kb)

# üì¶ –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(lambda message: True)
async def main_menu_handler(message: types.Message):
    user_id = message.from_user.id
    lang_code = user_languages.get(user_id, 'en')
    tr = LANGUAGES[lang_code]["messages"]
    
    text = message.text
    if text == tr["companion"]:
        await message.answer(tr["companion_selected"])
    elif text == tr["passenger"]:
        await message.answer(tr["passenger_selected"])
    elif text == tr["taxi"]:
        await message.answer(tr["taxi_selected"])
    elif text == tr["delivery"]:
        await message.answer(tr["delivery_selected"])
    elif text == tr["help"]:
        await message.answer(tr["help_text"])
    else:
        await message.answer(tr["unknown_command"])

# üîÑ –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
