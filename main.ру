# main.py
import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.webhook import get_new_configured_app
from aiohttp import web
from languages import LANGUAGES

API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL")
WEBHOOK_PATH = f"/webhook/{API_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8000))

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
app = web.Application()
app.router.add_post(WEBHOOK_PATH, get_new_configured_app(dispatcher=dp, bot=bot))

user_languages = {}

def get_language_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    row = []
    count = 0
    for code, lang in LANGUAGES.items():
        row.append(KeyboardButton(lang["name"]))
        count += 1
        if count % 2 == 0:
            kb.add(*row)
            row = []
    if row:
        kb.add(*row)
    return kb

def t(user_id, key):
    lang_code = user_languages.get(user_id, 'en')
    return LANGUAGES.get(lang_code, LANGUAGES['en'])['messages'].get(key, key)

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("üåç Please select your language / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=get_language_keyboard())

@dp.message_handler(lambda message: message.text in [lang["name"] for lang in LANGUAGES.values()])
async def set_language_handler(message: types.Message):
    user_id = message.from_user.id
    for code, lang in LANGUAGES.items():
        if message.text == lang["name"]:
            user_languages[user_id] = code
            await message.answer(lang["messages"]["language_selected"])
            await show_main_menu(message, code)
            return

async def show_main_menu(message, lang_code):
    tr = LANGUAGES[lang_code]["messages"]
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(
        KeyboardButton(tr["companion"]),
        KeyboardButton(tr["passenger"]),
    )
    kb.add(
        KeyboardButton(tr["taxi"]),
        KeyboardButton(tr["delivery"]),
    )
    kb.add(KeyboardButton(tr["help"]))
    await message.answer(tr["main_menu"], reply_markup=kb)

@dp.message_handler(lambda message: True)
async def main_menu_handler(message: types.Message):
    user_id = message.from_user.id
    lang_code = user_languages.get(user_id, 'en')
    tr = LANGUAGES[lang_code]["messages"]

    text = message.text
    if text == tr["companion"]:
        await message.answer(tr["companion_selected"])
    elif text == tr["passenger"]:
        await message.answer(tr["passenger_selected"])
    elif text == tr["taxi"]:
        await message.answer(tr["taxi_selected"])
    elif text == tr["delivery"]:
        await message.answer(tr["delivery_selected"])
    elif text == tr["help"]:
        await message.answer(tr["help_text"])
    else:
        await message.answer(tr["unknown_command"])

async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)

if __name__ == '__main__':
    logging.info(f"Starting bot on {WEBHOOK_URL}")
    app.on_startup.append(on_startup)
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)
