import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from languages import LANGUAGES

API_TOKEN = '7996715950:AAGGMdqSfG08ulx0zQ_eSHJ3NTB3uzcegAA'
ADMIN_ID = 5252767835

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

user_languages = {}

def get_message(user_id, key):
    lang = user_languages.get(user_id, 'en')
    return LANGUAGES.get(lang, LANGUAGES['en'])['messages'].get(key, "‚ùó Missing message")

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    for code, data in LANGUAGES.items():
        keyboard.insert(InlineKeyboardButton(text=data['name'], callback_data=f"lang_{code}"))
    await message.answer("üåç Please select your language / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('lang_'))
async def language_selected(callback_query: types.CallbackQuery):
    lang_code = callback_query.data.split('_')[1]
    user_languages[callback_query.from_user.id] = lang_code
    msg = get_message(callback_query.from_user.id, "language_selected")
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, msg)
    await show_main_menu(callback_query.from_user.id)

async def show_main_menu(user_id):
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton(text=get_message(user_id, "companion"), callback_data="role_companion"),
        InlineKeyboardButton(text=get_message(user_id, "passenger"), callback_data="role_passenger"),
        InlineKeyboardButton(text=get_message(user_id, "taxi"), callback_data="role_taxi"),
        InlineKeyboardButton(text=get_message(user_id, "delivery"), callback_data="role_delivery"),
        InlineKeyboardButton(text=get_message(user_id, "help"), callback_data="role_help")
    )
    await bot.send_message(user_id, get_message(user_id, "main_menu"), reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('role_'))
async def role_selected(callback_query: types.CallbackQuery):
    role = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    key = f"{role}_selected"
    msg = get_message(user_id, key)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(user_id, msg)

@dp.message_handler()
async def unknown_message(message: types.Message):
    await message.answer(get_message(message.from_user.id, "unknown_command"))

# For polling (Render compatible, since we‚Äôre not using webhooks here)
if __name__ == '__main__':
    try:
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logging.error(f"Failed to start polling: {e}")
