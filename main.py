from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from languages import LANGUAGES

import logging

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üîê –í–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
BOT_TOKEN = "7616940079:AAHBGT6Xhs75dZzaxnuwPqdC1nalMUuqlUc"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_languages = {}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def get_language_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    row = []
    for code, lang in LANGUAGES.items():
        row.append(KeyboardButton(lang['language_name']))
        if len(row) == 2:
            keyboard.add(*row)
            row = []
    if row:
        keyboard.add(*row)
    return keyboard

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –∫–ª—é—á—É –∏ —è–∑—ã–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_text(user_id, key):
    lang_code = user_languages.get(user_id, 'en')
    return LANGUAGES.get(lang_code, LANGUAGES['en']).get(key, f"[{key}]")

# –ü–æ–∏—Å–∫ –∫–æ–¥–∞ —è–∑—ã–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
def get_language_code_by_name(name):
    for code, lang in LANGUAGES.items():
        if lang['language_name'] == name:
            return code
    return None

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer("üåç Please select your language / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=get_language_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.message_handler(lambda message: message.text in [lang['language_name'] for lang in LANGUAGES.values()])
async def handle_language_selection(message: types.Message):
    lang_code = get_language_code_by_name(message.text)
    user_languages[message.from_user.id] = lang_code
    welcome = get_text(message.from_user.id, 'welcome')
    choose_role = get_text(message.from_user.id, 'choose_role')
    driver = get_text(message.from_user.id, 'driver')
    passenger = get_text(message.from_user.id, 'passenger')
    taxi = get_text(message.from_user.id, 'taxi')

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton(driver), KeyboardButton(passenger))
    keyboard.add(KeyboardButton(taxi))

    await message.answer(f"{welcome}\n\n{choose_role}", reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
